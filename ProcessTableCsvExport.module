<?php

/**
 * ProcessWire Table CSV Export Helper
 * by Adrian Jones
 *
 * Helper process module for generating CSV from a Table field
 *
 * ProcessWire 2.x
 * Copyright (C) 2011 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */

class ProcessTableCsvExport extends Process implements Module {

    /**
     * getModuleInfo is a module required by all modules to tell ProcessWire about them
     *
     * @return array
     *
     */
    public static function getModuleInfo() {
        return array(
            'title' => __('Process Table CSV Export'),
            'version' => '1.0.3',
            'summary' => __('Helper module for creating CSV to export'),
            'author' => 'Adrian Jones',
            'href' => 'http://modules.processwire.com/modules/table-csv-import-export/',
            'singular' => true,
            'autoload' => false,
            'page' => array(
                'name' => 'table-csv-export',
                'parent' => 'setup',
                'title' => 'Table CSV Export',
                'status' => 'hidden'
            ),
            'permission' => 'table-csv-export',
            'permissions' => array(
                'table-csv-export' => 'Access to Table CSV Export'
            ),
            'requires' => 'TableCsvImportExport',
            );
    }


    /**
     * Initialize the module
     *
     */
    public function init() {
        parent::init();
        $this->wire()->addHook('Page::exportTableCsv', $this, 'exportCsv'); // not limited to table-csv-export permission because only relevant to front-end
    }

    /**
     * Executed when root url for module is accessed
     *
     */
    public function ___execute() {
        $this->exportCsv();
    }


    public function outputCSV($data, $delimiter, $enclosure) {
        $output = fopen("php://output", "w");
        foreach ($data as $row) {
            fputcsv($output, $row, $delimiter == "tab" ? chr(9) : $delimiter, $enclosure);
        }
        fclose($output);
    }


    public function exportCsv($event = NULL) {
        // TODO: fix hard coded part!
        $delimiter = ";";
        $enclosure = '"';
        $extension = "csv";
        $csv = array();
        $fieldName = $this->wire('input')->get->fn;
        // TODO: Change hard coded
        $page = $this->wire('pages')->get(1032);
        $thisRepeater = $page->$fieldName;
        $fields = array();
        $fieldsRepeater = $thisRepeater->first()->fields;
        foreach ($fieldsRepeater as $field){
            $fields[] = $field;
        }

        $spalte = 0;
        foreach($fields as $field){
                $csv[0][$spalte] = $field;
                $spalte++;
        }

        $zeile = 1;
        foreach($thisRepeater as $repeaterItem){
            $wholeRowEmpty = true;
            foreach($fields as $field) {
                if ($repeaterItem->$field != "") {
                    $wholeRowEmpty =false;
                }
            }
            if ($wholeRowEmpty == false) {
                foreach ($fields as $field) {
                    if ($repeaterItem->$field != "") {
                        $csv[$zeile][$spalte] = $repeaterItem->$field;
                    } else {
                        $csv[$zeile][$spalte] = "";
                    }
                    $spalte++;
                }
            }
            $zeile++;
        }


        header("Content-type: text/csv");
        header("Content-Disposition: attachment; filename=".$fieldName . "_" .$page->title . ".".$extension);
        header("Pragma: no-cache");
        header("Expires: 0");

        $this->outputCSV($csv, $delimiter, $enclosure);
        exit;

    }

}
