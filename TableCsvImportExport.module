<?php

// TODO: Variablen umbenennen

class TableCsvImportExport extends WireData implements Module
{

    public static function getModuleInfo()
    {
        return array(
            'title' => 'Table CSV Import / Export',
            'summary' => 'Processwire module for admin and front-end importing and exporting of CSV formatted content for Profields Table fields.',
            'href' => 'http://modules.processwire.com/modules/table-csv-import-export/',
            'version' => '1.0.3',
            'permanent' => false,
            'autoload' => 'template=admin',
            'singular' => true,
            'installs' => 'ProcessTableCsvExport',
            'permissions' => array(
                'table-csv-import' => 'Access to Table CSV Import',
                'table-csv-import-overwrite' => 'Access to choose overwrite option when using Table CSV Import'
            )
        );
    }


    public function init(){
        $this->wire()->addHookAfter('InputfieldRepeater::getConfigInputfields', $this, 'hookAddConfig');
        $this->wire()->addHookAfter('InputfieldRepeater::render', $this, 'buildForms'); // when edit enabled
        $this->wire()->addHookAfter('InputfieldRepeater::processInput', $this, 'processImport');
        $this->wire()->addHook('Field::importCsv', $this, 'importCsv'); // not limited to table-csv-import permission because only relevant to front-end
    }


    public function hookAddConfig(HookEvent $event){
        // get existing inputfields from getConfigInputfields
        $inputfields = $event->return;

        $fieldset = $this->wire('modules')->get("InputfieldFieldset");
        $fieldset->attr('id', 'export_settings');
        $fieldset->label = __("Export Settings");
        $fieldset->description = __("Export settings for table fields");
//        $fieldset->collapsed = Inputfield::collapsedYes;
        $inputfields->append($fieldset);

        $f = $this->wire('modules')->get('InputfieldCheckbox');
        $f->label = __('Allow export');
        $f->description = __('If checked, users will have the option to export data from this field.');
        $f->columnWidth = 20;
        $f->attr('name', 'allow_export');
        $value = $this->wire('fields')->get($event->object->name)->allow_export;
        $f->attr('checked', $value ? 'checked' : '');
        $fieldset->append($f);

        $f = $this->wire('modules')->get("InputfieldText");
        $f->label = __('Columns separated with');
        $f->description = __('For tab separated, enter: tab');
        $f->value = $this->delimiter;
        $f->attr('name', 'delimiter');
        $f->attr('value', $this->delimiter);
        $value = $this->wire('fields')->get($event->object->name)->delimiter;
        if ($value == ''){
            $f->value = ',';
        }
        else{
            $f->value = $value;
        }

        $f->columnWidth = 20;
        $fieldset->append($f);

        $f = $this->wire('modules')->get("InputfieldText");
        $f->label = __('Column enclosure');
        $f->description = __('Enclosure between values, e.g. double quotes ("")');
        $f->attr('name', 'enclosure');
        $value = $this->wire('fields')->get($event->object->name)->enclosure;
        if ($value == ''){
            $f->value = '"';
        }
        else{
            $f->value = $value;
        }
        $f->columnWidth = 20;
        $fieldset->append($f);

        $f = $this->wire('modules')->get("InputfieldText");
        $f->label = __('File extension');
        $f->attr('name', 'extension');
        $value = $this->wire('fields')->get($event->object->name)->extension;
        if ($value == ''){
            $f->value = 'csv';
        }
        else{
            $f->value = $value;
        }
        $f->columnWidth = 20;
        $fieldset->append($f);

        $f = $this->wire('modules')->get("InputfieldRadios");
        $f->label = __('Export template');
        $f->description = __('You can select a different Table field template for export. For example you have the registrations for a run and you want to upload the results afterwards. Then you can export the registations with an results template');
        $f->attr('name', 'template');
        $f->columnWidth = 20;
        $allFields = $this->wire('fields');
        foreach ($allFields as $field) {
            if ($field->type == "FieldtypeRepeater"){
                $f->addOption($field->name, $field->name);
            }
        }
        $value = $this->wire('fields')->get($event->object->name)->template;
        $f->value = $value;
        $fieldset->append($f);

        $fieldset = $this->wire('modules')->get("InputfieldFieldset");
        $fieldset->attr('id', 'import_settings');
        $fieldset->label = __("Import Settings");
        $fieldset->description = __("Import settings for table fields");
        $fieldset->collapsed = Inputfield::collapsedYes;
        $inputfields->append($fieldset);

        $f = $this->wire('modules')->get('InputfieldCheckbox');
        $f->label = __('Allow import');
        $f->description = __('If checked, users will have the option to import data to this field.');
        $f->columnWidth = 50;
        $f->attr('name', 'allow_import');
        $value = $this->wire('fields')->get($event->object->name)->allow_import;
        $f->attr('checked', $this->wire('fields')->get($event->object->name)->allow_import ? 'checked' : '');
        $fieldset->append($f);

        $f = $this->wire('modules')->get('InputfieldCheckbox');
        $f->label = __('Allow CSV Import Overwrite Option');
        $f->description = __('If checked, users will have the option to overwrite, not just append, when adding data to table via the Table CSV Import/Export module.');
        $f->columnWidth = 50;
        $f->attr('name', 'allow_overwrite');
        $value = $this->wire('fields')->get($event->object->name)->allow_overwrite;
        $f->attr('checked', $this->wire('fields')->get($event->object->name)->allow_overwrite ? 'checked' : '');
        $fieldset->append($f);
    }

    public function buildForms(HookEvent $event){
        $fieldName = $event->object->name;
        if ($this->wire('fields')->get($fieldName)->allow_import == 1 && $this->wire('user')->hasPermission("table-csv-import")) $this->buildImportForm($event);
        if ($this->wire('fields')->get($fieldName)->allow_export == 1 && $this->wire('user')->hasPermission("table-csv-export")) $this->buildExportForm($event);
    }


    public function buildImportForm(HookEvent $event){
        // we're interested in page editor only
        if ($this->wire('page')->process != 'ProcessPageEdit') return;

        $fieldName = $event->object->name;

        $inputfields = new InputfieldWrapper();

        $fieldset = $this->wire('modules')->get("InputfieldFieldset");
        $fieldset->attr('id', $fieldName . '_import_csv');
        $fieldset->label = __("Import CSV");
        $fieldset->description = __("The structure of the CSV must match the table fields. If you want to paste directly from Excel, use 'tab' separated. Import will happen on page save." . ($this->wire('fields')->get($fieldName)->allow_overwrite != 1 || !$this->wire('user')->hasPermission("table-csv-import-overwrite") ? "\nImported data will be appended to existing rows." : ""));
        //$fieldset->collapsed = Inputfield::collapsedYes;

        if ($this->wire('fields')->get($fieldName)->allow_overwrite == 1 && $this->wire('user')->hasPermission("table-csv-import-overwrite")) {
            $f = $this->wire('modules')->get("InputfieldSelect");
            $f->name = $fieldName . '_append_overwrite';
            $f->label = __('Append or Overwrite');
            $f->description = __("Determines whether to append new rows, or overwrite all existing rows.");
            $f->required = true;
            $f->addOption("append", "Append");
            $f->addOption("overwrite", "Overwrite");
            $f->columnWidth = 50;
            $fieldset->add($f);
        }

        $f = $this->wire('modules')->get("InputfieldMarkup");
        $f->label = __('Upload CSV File');
        $f->name = $fieldName . '_csv_upload';
        $f->value = "<input name='" . $event->object->name . "_csv_file' type='file' />";
        $f->notes = __("File must have .csv, .tsv, or .txt extension\nBe sure you match the settings above to the format of your data");
        $f->columnWidth = 50;
        $fieldset->add($f);

        $inputfields->add($fieldset);
        return $event->return .= $inputfields->render();
    }


    public function buildExportForm(HookEvent $event)
    {

        // we're interested in page editor only
        if ($this->wire('page')->process != 'ProcessPageEdit') return;
        $fieldName = $event->object->name;

        $conf = $this->getModuleInfo();
        $version = (int)$conf['version'];
        $this->wire('config')->scripts->add($this->wire('config')->urls->TableCsvImportExport . "TableCsvImportExport.js?v={$version}");

        $inputfields = new InputfieldWrapper();

        $fieldset = $this->wire('modules')->get("InputfieldFieldset");
        $fieldset->attr('id', 'export_csv');
        $fieldset->label = __("Export CSV");
        $fieldset->description = __("Export the content of this table to a CSV file");

        $p = $this->wire('process')->getPage(); // define page

        $f = $this->wire('modules')->get("InputfieldButton");
        $f->name = $fieldName . '_export_button';
        $f->value = $this->_x('Export as CSV', 'button');
        $f->attr('class', 'ui-button ui-widget ui-corner-all ui-state-default export_csv');
        $f->attr('data-pageid', $p->id);
        $f->attr('data-fieldname', $event->object->name);
        $fieldset->add($f);

        $f = $this->wire('modules')->get("InputfieldMarkup");
        $f->attr('name', 'tableExportIframe');
        $f->collapsed = Inputfield::collapsedYes;
        $f->value = "<iframe id='download' src=''></iframe>";
        $fieldset->add($f);

        $inputfields->add($fieldset);

        return $event->return .= $inputfields->render();
    }


    public function processImport(HookEvent $event){
        $fieldName = $event->object->name;
        $this->wire('session')->fieldName = $fieldName;
        $csv_filename = $this->wire('session')->fieldName . '_csv_file';
        if ($this->wire('input')->post->{$fieldName . '_csv_data'} == '' && $_FILES[$csv_filename]["name"] == '') return;

        //CSV file upload
        if (isset($_FILES[$csv_filename]) && $_FILES[$csv_filename]["name"] !== '') {
            $csv_file_extension = pathinfo($_FILES[$csv_filename]["name"], PATHINFO_EXTENSION);
            if ($csv_file_extension == 'csv' || $csv_file_extension == 'txt' || $csv_file_extension == 'tsv') {
                $this->wire('session')->{$fieldName . '_csv_data'} = file_get_contents($_FILES[$csv_filename]["tmp_name"]);
            }
            else {
                $this->wire()->error($this->_("That is not an allowed file extension for a CSV import. Try again with a .csv, .tsv, or .txt file"));
            }
            unlink($_FILES[$csv_filename]["tmp_name"]);
        }

        // CSV pasted in
        if ($this->wire('input')->post->{$fieldName . '_csv_data'} != '') $this->wire('session')->{$fieldName . '_csv_data'} = $this->wire('input')->post->{$fieldName . '_csv_data'};

        // Import
        $this->importCsv();

    }


    public function importCsv($event = NULL){
        set_time_limit(3600 * 12);

        $initial_auto_detect_line_endings = ini_get('auto_detect_line_endings');
        ini_set('auto_detect_line_endings', true);

        $fieldName = $this->wire('session')->fieldName;

        $csvData = !is_null($event) ? $event->arguments(0) : $this->wire('session')->{$fieldName . '_csv_data'};
        unset($this->wire('session')->{$fieldName . '_csv_data'});
        $delimiter = $this->wire('fields')->get($fieldName)->delimiter;
        $enclosure = $this->wire('fields')->get($fieldName)->enclosure;
        $overwrite = !is_null($event) ? $event->arguments(6) : $this->wire('input')->post->{$fieldName . '_append_overwrite'};


        $page = $this->wire('process')->getPage();
        $thisRepeater = $page->$fieldName;
        $fields = array();
        if (count($thisRepeater) == 0) {
            // add test item, so the fields are visable
            $thisRepeater->getNew();
        }
        $fieldsRepeater = $thisRepeater->first()->fields;
        foreach ($fieldsRepeater as $field) {
            $fields[] = $field;
        }


        if ($overwrite == 'overwrite') {
            foreach ($thisRepeater as $repeaterItem) {
                $thisRepeater->remove($repeaterItem);
            }
            $page->save();
        }

        // if there is no new line at the end, add one to fix issue if last item in CSV row has enclosures but others don't
        if (substr($csvData, -1) != "\r" && substr($csvData, -1) != "\n") $csvData .= PHP_EOL;

        require_once __DIR__ . '/parsecsv.lib.php';

        $rows = new parseCSV();
        $rows->encoding('UTF-16', 'UTF-8');
        $rows->heading = $namesFirstRow;
        $rows->delimiter = $delimiter == "tab" ? chr(9) : $delimiter;
        $rows->enclosure = $enclosure;
        $rows->parse($csvData);

        $i = 0;
        foreach ($rows->data as $data) {
            if (count($fields) != count($data)) {
                $this->error("The number of columns does not match between the repeater and the csv file! Please check the fields and the table. Nothing was imported.");
                break;
            }
            if ($i != 0) {
                $item = $thisRepeater->getNew();
                $j = 0;

                foreach ($fields as $field) {
                    for ($k = 0; $k < count($data); $k++) {
                        if ($rows->data[0][$k] == $field) {
                            $item->$field = $data[$j];
                        }
                    }

                    $j++;
                }
                $item->save();
                $thisRepeater->add($item);
                $page->save();
            }
            $i++;
        }

        ini_set('auto_detect_line_endings', $initial_auto_detect_line_endings);

    }
}